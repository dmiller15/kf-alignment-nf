docker.enabled = true

params {
  in = ""
  sample = ""
  cram_fasta = ""
  reference_tar = ""
  knownsites = ""
  knownsites_indexes = ""
  calling_intervallist = ""
  coverage_intervallist = ""
  evaluation_intervallist = ""
  precalc_contam = ""
  contamination_bed = ""
  contamination_mu = ""
  contamination_ud = ""
  dbsnp_vcf = ""
  dbsnp_vcf_index = ""
  cutadapt_r1_adapter = ""
  cutadapt_r2_adapter = ""
  cutadapt_min_len = ""
  cutadapt_quality_base = ""
  cutadapt_quality_cutoff = ""
  wgs_or_wxs = ""
  outdir = ""
  output_basename = ""
  max_memory = ""
  max_time = ""
  max_cpus = ""
  test_aws = false
}

includeConfig 'conf/base.config'
includeConfig 'conf/kids_first.config'
if (params.test_aws) { includeConfig 'conf/dockers_aws.config' }

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
report {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_report_${trace_timestamp}.html"
}
timeline {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_timeline_${trace_timestamp}.html"
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
// from: https://github.com/nf-core/sarek/blob/master/nextflow.config
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
