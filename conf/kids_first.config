process {
    withName: SAMTOOLS_SPLIT {
        ext.args = { "-f '%*_%#.bam'" }
    }
    withName: BIOBAMBAM_BAMTOFASTQ {
        ext.args = { 'tryoq=1' }
    }
    withName: CUTADAPT {
        ext.args = { [
          (params.cutadapt_r1_adapter) ? "-a ${params.cutadapt_r1_adapter}" : '',
          (params.cutadapt_r2_adapter) ? "-A ${params.cutadapt_r2_adapter}" : '',
          (params.cutadapt_min_len) ? "--minimum-length ${params.cutadapt_min_len}" : '',
          (params.cutadapt_quality_base) ? "--quality-base ${params.cutadapt_quality_base}" : '',
          (params.cutadapt_quality_cutoff) ? "--quality-cutoff ${params.cutadapt_quality_cutoff}" : ''
        ].join(' ').trim() }
        publishDir = [
            mode: 'copy',
            path: { "${params.outdir}/cutadapt/" },
            pattern: "*cutadapt_stats.txt"
        ]
    }
    withName: BWA_MEM {
        ext.args = { '-K 100000000 -v 3 -Y' }
        ext.args3 = { '-S -f bam -l 0' }
        ext.args4 = { '--natural-sort --tmpdir ./ -l 5' }
    }
    withName: GATK4_BASERECALIBRATOR {
        ext.args = { '--use-original-qualities' }
    }
    withName: GATK4_GATHERBQSRREPORTS {
        publishDir = [
          mode: 'copy',
          path: { "${params.outdir}/" },
          pattern: "*.GatherBqsrReports.recal_data.csv"
        ]
    }
    withName: GATK4_APPLYBQSR {
        ext.args = { '--use-original-qualities --add-output-sam-program-record --static-quantized-quals 10 --static-quantized-quals 20 --static-quantized-quals 30' }
    }
    withName: PICARD_GATHERBAMFILES {
        ext.args = { 'CREATE_INDEX=true CREATE_MD5_FILE=true' }
    }
    withName: PICARD_COLLECTALIGNMENTSUMMARYMETRICS {
        ext.prefix = { "$params.output_basename" }
        ext.args = { 'METRIC_ACCUMULATION_LEVEL="null" METRIC_ACCUMULATION_LEVEL="SAMPLE" METRIC_ACCUMULATION_LEVEL="LIBRARY"' }
        publishDir = [
            mode: 'copy',
            path: { "${params.outdir}/metrics/" },
            pattern: "*.alignment_summary_metrics"
        ]
    }
    withName: PICARD_COLLECTGCBIASMETRICS {
        ext.prefix = { "$params.output_basename" }
        ext.args = { 'METRIC_ACCUMULATION_LEVEL="null" METRIC_ACCUMULATION_LEVEL="SAMPLE" METRIC_ACCUMULATION_LEVEL="LIBRARY"' }
        publishDir = [
            mode: 'copy',
            path: { "${params.outdir}/metrics/" },
            pattern: "*.gc_bias*metrics*"
        ]
    }
    withName: PICARD_COLLECTINSERTSIZEMETRICS {
        ext.prefix = { "$params.output_basename" }
        ext.args = { 'METRIC_ACCUMULATION_LEVEL="null" METRIC_ACCUMULATION_LEVEL="SAMPLE" METRIC_ACCUMULATION_LEVEL="LIBRARY"' }
        publishDir = [
            mode: 'copy',
            path: { "${params.outdir}/metrics/" },
            pattern: "*.insert_size_*"
        ]
    }
    withName: PICARD_COLLECTSEQUENCINGARTIFACTMETRICS {
        ext.prefix = { "$params.output_basename" }
        publishDir = [
            mode: 'copy',
            path: { "${params.outdir}/metrics/" },
            pattern: "*_metrics"
        ]
    }
    withName: PICARD_QUALITYSCOREDISTRIBUTION {
        ext.prefix = { "$params.output_basename" }
        publishDir = [
            mode: 'copy',
            path: { "${params.outdir}/metrics/" },
            pattern: "*.qual_score_dist.*"
        ]
    }
    withName: PICARD_COLLECTWGSMETRICS {
        ext.prefix = { "$params.output_basename" }
        ext.args = { 'VALIDATION_STRINGENCY=SILENT INCLUDE_BQ_HISTOGRAM=true USE_FAST_ALGORITHM=true READ_LENGTH=250' }
        publishDir = [
            mode: 'copy',
            path: { "${params.outdir}/metrics/" },
            pattern: "*.wgs_metrics"
        ]
    }
    withName: PICARD_COLLECTHSMETRICS {
        ext.prefix = { "$params.output_basename" }
        publishDir = [
            mode: 'copy',
            path: { "${params.outdir}/metrics/" },
            pattern: "*.hs_metrics"
        ]
    }
    withName: SAMTOOLS_IDXSTATS_XY {
        ext.prefix = { "$params.output_basename" }
        publishDir = [
            mode: 'copy',
            path: { "${params.outdir}/metrics/" },
            pattern: "*.txt"
        ]
    }
    withName: SAMTOOLS_VIEW_CRAM {
        ext.prefix = { "$params.output_basename" }
        publishDir = [
            mode: 'copy',
            path: { "${params.outdir}" },
            pattern: "*.{cram,crai}"
        ]

    }
    withName: VERIFYBAMID {
        ext.prefix = { "$params.output_basename" }
        publishDir = [
            mode: 'copy',
            path: { "${params.outdir}/metrics/" },
            pattern: ".selfSM"
        ]
    }
    withName: PICARD_INTERVALLISTTOOLS {
        ext.args = { 'BREAK_BANDS_AT_MULTIPLES_OF=1000000 SUBDIVISION_MODE=BALANCING_WITHOUT_INTERVAL_SUBDIVISION_WITH_OVERFLOW SCATTER_COUNT=50 UNIQUE=true SORT=true' }
    }
    withName: GATK4_HAPLOTYPECALLER {
        ext.args = { '--interval_padding 500' }
        ext.args2 = { '-ERC GVCF --max_alternate_alleles 3 -variant_index_parameter 128000 -variant_index_type LINEAR --read_filter OverclippedRead' }
    }
    withName: PICARD_MERGEVCFS_RENAMESAMPLE {
        ext.prefix = { "$params.output_basename" }
        publishDir = [
            mode: 'copy',
            path: { "${params.outdir}" },
            pattern: "*g.vcf.gz*"
        ]
    }
    withName: PICARD_COLLECTVARIANTCALLINGMETRICS {
        ext.prefix = { "$params.output_basename" }
        ext.args = { 'GVCF_INPUT=true' }
        publishDir = [
            mode: 'copy',
            path: { "${params.outdir}/metrics/" },
            pattern: "*_metrics"
        ]
    }
}
